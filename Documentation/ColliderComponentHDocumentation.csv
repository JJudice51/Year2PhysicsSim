class ColliderComponent : public GameEngine::Component,this class is a child class of the class Component. It is specifically a component for a collider attached to its owner,
,,
public:,,
"enum ColliderType {CIRCLE, AABB};",This enumerator checks via switch statement which type of collider is being checked for collision and runs the appropriate function.,
,,
public:,,
void start() override;,this function runs before the start of the first update loop and is overridden from the base class Component.,
Collision* checkCollision(ColliderComponent* other);,this function detects a collision with another collider. It determines which type of collider it is colliding with via switch statement and use of the enum above.,
virtual Collision* checkCollisionCircle(CircleColliderComponent* other) = 0;,this function detects a collision with a circle collider with a base value of 0 meaning no collision. It is virtual and intended to be overridden in child classes.,
virtual Collision* checkCollisionAABB(AABBColliderComponent* other) = 0;,this function detects a collision with a AABB collider with a base value of 0 meaning no collision. It is virtual and intedned to be overridden in child classes.,
void onCollisionEnter(GamePhysics::Collision* other) override;,this function is overridden from its base class and determines what the collider will do once a collision has started.,
ColliderType getColliderType() { return m_colliderType;  },this function grabs and returns the type of collider this collider is.,
void setColliderType(ColliderType type) { m_colliderType = type; },this function sets the collider type to the one indicated when called.,
void update(double deltaTime) override;,this function determines what the collider component does each update loop and is overridden from the base class.,
unsigned int getColor() { return m_color; },this function grabs and returns the color of the collider.,
bool getIsTrigger() { return m_isTrigger; },this function grabs and returns the isTrigger boolean.,
void setIsTrigger(bool isTrigger) { m_isTrigger = isTrigger;  },this function sets the isTrigger boolean.,
RigidBodyComponent* getRigidBody() { return m_rigidBody;  },this function grabs and returns a RigidBodyComponent.,
,,
private:,,
bool m_isTrigger;,this bool determines if this collider component is a trigger collider or not.,
ColliderType m_colliderType;,this ColliderType determines what type of collider component is the this collider is.,
unsigned int m_color = 0x00FF00FF;,this int determines what color the collider component is when drawn in the window.,
RigidBodyComponent* m_rigidBody;,this RigidBodyComponent is a referrence to the owner of this colliders RigidBodyComponent.,
"**end of ColliderComponent Class**
",,
,,
struct Collision,This struct gives values to a collision.,
,,
public:,,
GameMath::Vector2 normal;,the normalized vector of the collision.,
ColliderComponent* collider;,the collider component of the collision.,
GameMath::Vector2 contactPoint;,the contact point where the collision occurs.,
float penetrationDistance;,how far this collision penetrates into each collider.,